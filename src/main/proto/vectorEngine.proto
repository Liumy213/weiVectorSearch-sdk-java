syntax = "proto3";
package proto;

option java_multiple_files = true;
option java_package = "io.github.liumy213.rpc";
option java_outer_classname = "VectorProto";

service VectorSearchService {
  rpc has_collection(HasCollectionRequest) returns (HasCollectionResponse) {}
  rpc create_collection(CreateCollectionRequest) returns (Status) {}
  rpc drop_collection(DropCollectionRequest) returns (Status) {}
  rpc describe_collection(DescribeCollectionRequest) returns (DescribeCollectionResponse) {}

  rpc create_index(CreateIndexRequest) returns (Status) {}
  rpc drop_index(DropIndexRequest) returns (Status) {}

  rpc insert_entity(InsertRequest) returns (InsertResponse) {}
  rpc search_entity(SearchRequest) returns (SearchResponse) {}
}

message HasCollectionRequest {
  // The collection name you want to check.
  string collection_name = 1;
}

message HasCollectionResponse {
  Status status = 1;
  bool value = 2;
}

/**
* Create collection
*/
message CreateCollectionRequest {
  // The unique collection name in vector search engine.(Required)
  string collection_name = 1;
  // The serialized `CollectionSchema`(Required)
  CollectionSchema schema = 2;
}

/**
 * @brief Collection schema
 */
message CollectionSchema {
  string name = 1;
  string description = 2;
  repeated FieldSchema fields = 3;
}

message DropCollectionRequest {
  // The unique collection name.(Required)
  string collection_name = 1;
}

message DescribeCollectionRequest {
  // The collection name you want to describe, you can pass collection_name or collectionID
  string collection_name = 1;
}

/**
* DescribeCollection Response
*/
message DescribeCollectionResponse {
  // Contain error_code and reason
  Status status = 1;
  // The schema param when you created collection.
  CollectionSchema schema = 2;
  // The collection id
  int64 collectionID = 3;
  // Hybrid timestamp in vector search engine
  uint64 created_timestamp = 4;
  // The collection name
  string collection_name = 5;
  repeated KeyValuePair properties = 6;
}

message CreateIndexRequest {
  // The particular collection name you want to create index.
  string collection_name = 1;
  // The vector field name in this particular collection
  string field_name = 2;
  // Support keys: index_type,metric_type, params. Different index_type may has different params.
  repeated KeyValuePair extra_params = 3;
  // Version before 2.0.2 doesn't contain index_name, we use default index name.
  string index_name = 4;
}

message DropIndexRequest {
  string collection_name = 1; // must
  string field_name = 2; // must
  string index_name = 3;
}

message InsertRequest {
  string collection_name = 1;
  repeated FieldData fields_data = 2;
  uint32 num_rows = 3;
}

message InsertResponse {
  Status status = 1;
  LongArray IDs = 2;
}

message SearchRequest {
  string collection_name = 1; // must
  string dsl = 2; // must
  // serialized `PlaceholderGroup`
  oneof data {
    FloatArrayArray search_vectors = 3;
    StringArray texts = 4;
  }
  DslType dsl_type = 5; // must
  repeated string output_fields = 6;
  repeated KeyValuePair search_params = 7; // must
  int64 nq = 8;
}

enum DslType {
  Dsl = 0;
  BoolExprV1 = 1;
}

message SearchResponse {
  Status status = 1;
  SearchResultData results = 2;
  string collection_name = 3;
}

message SearchResultData {
  int64 num_queries = 1;
  int64 top_k = 2;
  repeated FieldData fields_data = 3;
  repeated float scores = 4;
  LongArray ids = 5;
  repeated int64 topks = 6;
  repeated string output_fields = 7;
}

message BoolArray { repeated bool data = 1; }

message IntArray { repeated int32 data = 1; }

message LongArray { repeated int64 data = 1; }

message FloatArray { repeated float data = 1; }

message DoubleArray { repeated double data = 1; }

message StringArray { repeated string data = 1; }

message ArrayArray {
  repeated ScalarField data = 1;
  DataType element_type = 2;
}

message FloatArrayArray {
  repeated FloatArray float_vector = 1;
}

message FieldData {
  DataType type = 1;
  string field_name = 2;
  oneof field {
    ScalarField scalars = 3;
    VectorField vectors = 4;
  }
  int64 field_id = 5;
}

message ScalarField {
  oneof data {
    BoolArray bool_data = 1;
    IntArray int_data = 2;
    LongArray long_data = 3;
    FloatArray float_data = 4;
    DoubleArray double_data = 5;
    StringArray string_data = 6;
    ArrayArray array_data = 7;
  }
}

message VectorField {
  int64 dim = 1;
  oneof data {
    FloatArray float_vector = 2;
  }
}

/**
 * @brief Field schema
 */
message FieldSchema {
  int64 fieldID = 1;
  string name = 2;
  string description = 3;
  DataType data_type = 4;
  repeated KeyValuePair type_params = 5;
  repeated KeyValuePair index_params = 6;
  ModelType model_type = 7;
}

/**
 * @brief Field data type
 */
enum DataType {
  None = 0;
  Bool = 1;
  Int32 = 2;
  Int64 = 3;

  Float = 10;
  Double = 11;

  String = 20;

  FloatVector = 101;
}

/**
 * @brief text to vector model type
 */
enum ModelType {
  NONE = 0;
  SIMCSE = 1;
}

message KeyValuePair {
  string key = 1;
  string value = 2;
}

message Status {
  ErrorCode error_code = 1;
  string reason = 2;
}

// Deprecated
enum ErrorCode {
  Success = 0;
  UnexpectedError = 1;
  ConnectFailed = 2;
  CollectionNotExists = 3;
  IllegalDimension = 4;
  IllegalIndexType = 5;
  IllegalCollectionName = 6;
  IllegalTOPK = 7;
  IllegalSearchResult = 8;
  BuildIndexError = 9;
  IllegalNLIST = 10;
  IllegalMetricType = 11;
  OutOfMemory = 12;
  IndexNotExist = 13;
  EmptyCollection = 14;
  CollectionNameNotFound = 15;
  NotReadyServe = 16;
}
