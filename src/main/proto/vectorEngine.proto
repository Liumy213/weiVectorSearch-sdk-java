syntax = "proto3";
package proto;

option java_multiple_files = true;
option java_package = "io.github.liumy213.rpc";
option java_outer_classname = "VectorProto";

import "common.proto";

service VectorSearchService {
  rpc has_collection(HasCollectionRequest) returns (BoolResponse) {}
  rpc create_collection(CreateCollectionRequest) returns (Status) {}
  rpc drop_collection(DropCollectionRequest) returns (Status) {}
  rpc show_collections(ShowCollectionsRequest) returns (ShowCollectionsResponse) {}
  rpc describe_collection(DescribeCollectionRequest) returns (DescribeCollectionResponse) {}

  rpc create_partition(CreatePartitionRequest) returns (Status) {}
  rpc drop_partition(DropPartitionRequest) returns (Status) {}
  rpc has_partition(HasPartitionRequest) returns (BoolResponse) {}
  rpc show_partitions(ShowPartitionsRequest) returns (ShowPartitionsResponse) {}

  rpc create_index(CreateIndexRequest) returns (Status) {}
  rpc describe_index(DescribeIndexRequest) returns (DescribeIndexResponse) {}
  rpc drop_index(DropIndexRequest) returns (Status) {}

  rpc insert_entity(InsertRequest) returns (MutationResult) {}
  rpc delete_entity(DeleteRequest) returns (MutationResult) {}
  rpc search_entity(SearchRequest) returns (SearchResults) {}
  rpc query_entity(QueryRequest) returns (QueryResults) {}
}

message HasCollectionRequest {
  // The collection name you want to check.
  string collection_name = 1;
  // If time_stamp is not zero, will return true when time_stamp >= created collection timestamp, otherwise will return false.
  uint64 time_stamp = 2;
}

message BoolResponse {
  Status status = 1;
  bool value = 2;
}

/**
* Create collection
*/
message CreateCollectionRequest {
  // The unique collection name in vector search engine.(Required)
  string collection_name = 1;
  // The serialized `CollectionSchema`(Required)
  CollectionSchema schema = 2;
  int32 shards_num = 3;
  repeated KeyValuePair properties = 4;
  int64 num_partitions = 5; // num of default physical partitions, only used in partition key mode and changes are not supported
}

/**
 * @brief Collection schema
 */
message CollectionSchema {
  string name = 1;
  string description = 2;
  bool autoID = 3;
  repeated FieldSchema fields = 4;
}

message DropCollectionRequest {
  // The unique collection name.(Required)
  string collection_name = 1;
}

message ShowCollectionsRequest {
  uint64 time_stamp = 1;
  // Decide return Loaded collections or All collections(Optional)
  ShowType type = 2;
  // When type is InMemory, will return these collection's inMemory_percentages.(Optional)
  // Deprecated: use GetLoadingProgress rpc instead
  repeated string collection_names = 3;
}

enum ShowType {
  // Will return all collections
  All = 0;
  // Will return loaded collections with their inMemory_percentages
  InMemory = 1;
}

message ShowCollectionsResponse {
  // Contain error_code and reason
  Status status = 1;
  // Collection name array
  repeated string collection_names = 2;
  // Collection Id array
  repeated int64 collection_ids = 3;
  // Hybrid timestamps in vector search engine
  repeated uint64 created_timestamps = 4;
  // The utc timestamp calculated by created_timestamp
  repeated uint64 created_utc_timestamps = 5;
  // Load percentage on querynode when type is InMemory
  // Deprecated: use GetLoadingProgress rpc instead
  repeated int64 inMemory_percentages = 6;
  // Indicate whether query service is available
  repeated bool query_service_available = 7;
}

message DescribeCollectionRequest {
  // The collection name you want to describe, you can pass collection_name or collectionID
  string collection_name = 1;
  // The collection ID you want to describe
  int64 collectionID = 2;
  // If time_stamp is not zero, will describe collection success when time_stamp >= created collection timestamp, otherwise will throw error.
  uint64 time_stamp = 3;
}

/**
* DescribeCollection Response
*/
message DescribeCollectionResponse {
  // Contain error_code and reason
  Status status = 1;
  // The schema param when you created collection.
  CollectionSchema schema = 2;
  // The collection id
  int64 collectionID = 3;
  // Hybrid timestamp in vector search engine
  uint64 created_timestamp = 4;
  // The utc timestamp calculated by created_timestamp
  uint64 created_utc_timestamp = 5;
  // The shards number you set.
  int32 shards_num = 6;
  // The message ID/posititon when collection is created
  repeated KeyDataPair start_positions = 7;
  // The collection name
  string collection_name = 8;
  repeated KeyValuePair properties = 9;
  int64 num_partitions = 10;
}

message KeyDataPair {
  string key = 1;
  bytes data = 2;
}

message CreatePartitionRequest {
  // The collection name in vector search engine
  string collection_name = 1;
  // The partition name you want to create.
  string partition_name = 2;
}

/*
* Drop partition in created collection.
*/
message DropPartitionRequest {
  // The collection name in vector search engine
  string collection_name = 1;
  // The partition name you want to drop
  string partition_name = 2;
}

/*
* Check if partition exist in collection or not.
*/
message HasPartitionRequest {
  // The collection name in vector search engine
  string collection_name = 1;
  // The partition name you want to check
  string partition_name = 2;
}

message ShowPartitionsRequest {
  // The collection name you want to describe, you can pass collection_name or collectionID
  string collection_name = 1;
  // The collection id in vector search engine
  int64 collectionID = 2;
  // When type is InMemory, will return these patitions's inMemory_percentages.(Optional)
  repeated string partition_names = 3;
  // Decide return Loaded partitions or All partitions(Optional)
  // Deprecated: use GetLoadingProgress rpc instead
  ShowType type = 6;
}

/*
* List all partitions for particular collection response.
* The returned datas are all rows, we can format to columns by therir index.
*/
message ShowPartitionsResponse {
  // Contain error_code and reason
  Status status = 1;
  // All partition names for this collection
  repeated string partition_names = 2;
  // All partition ids for this collection
  repeated int64 partitionIDs = 3;
  // All hybrid timestamps
  repeated uint64 created_timestamps = 4;
  // All utc timestamps calculated by created_timestamps
  repeated uint64 created_utc_timestamps = 5;
  // Load percentage on querynode
  // Deprecated: use GetLoadingProgress rpc instead
  repeated int64 inMemory_percentages = 6;
}

message CreateIndexRequest {
  // The particular collection name you want to create index.
  string collection_name = 1;
  // The vector field name in this particular collection
  string field_name = 2;
  // Support keys: index_type,metric_type, params. Different index_type may has different params.
  repeated KeyValuePair extra_params = 3;
  // Version before 2.0.2 doesn't contain index_name, we use default index name.
  string index_name = 4;
}

message DescribeIndexRequest {
  // The particular collection name in vector search engine
  string collection_name = 1;
  // The vector field name in this particular collection
  string field_name = 2;
  string index_name = 3;
  uint64 timestamp = 4;
}

/*
* Index informations
*/
message IndexDescription {
  // Index name
  string index_name = 1;
  // Index id
  int64 indexID = 2;
  // Will return index_type, metric_type, params(like nlist).
  repeated KeyValuePair params = 3;
  // The vector field name
  string field_name = 4;
  // index build progress
  int64 indexed_rows = 5;
  int64 total_rows = 6;
  // index state
  IndexState state = 7;
  string index_state_fail_reason = 8;
  int64 pending_index_rows = 9;
}

enum IndexState {
  IndexStateNone = 0;
  Unissued = 1;
  InProgress = 2;
  Finished = 3;
  Failed = 4;
  Retry = 5;
}

/*
* Describe index response
*/
message DescribeIndexResponse {
  // Response status
  Status status = 1;
  // All index informations, for now only return tha latest index you created for the collection.
  repeated IndexDescription index_descriptions = 2;
}

message DropIndexRequest {
  string collection_name = 1; // must
  // Deprecated: not be used in the vector search engine
  string field_name = 2;
  string index_name = 3;
}

message InsertRequest {
  string collection_name = 1;
  string partition_name = 2;
  repeated FieldData fields_data = 3;
  repeated uint32 hash_keys = 4;
  uint32 num_rows = 5;
}

message UpsertRequest {
  string collection_name = 1;
  string partition_name = 2;
  repeated FieldData fields_data = 3;
  repeated uint32 hash_keys = 4;
  uint32 num_rows = 5;
}

message MutationResult {
  Status status = 1;
  IDs IDs = 2; // required for insert, delete, upsert
  repeated uint32 succ_index = 3; // error indexes indicate
  repeated uint32 err_index = 4; // error indexes indicate
  bool acknowledged = 5;
  int64 insert_cnt = 6;
  int64 delete_cnt = 7;
  int64 upsert_cnt = 8;
  uint64 timestamp = 9;
}

message DeleteRequest {
  string collection_name = 1;
  string partition_name = 2;
  string expr = 3;
  repeated uint32 hash_keys = 4;
}

message SearchRequest {
  string collection_name = 1; // must
  repeated string partition_names = 2; // must
  string dsl = 3; // must
  // serialized `PlaceholderGroup`
  bytes placeholder_group = 4; // must
  repeated string texts = 5;
  DslType dsl_type = 6; // must
  repeated string output_fields = 7;
  repeated KeyValuePair search_params = 8; // must
  uint64 travel_timestamp = 9;
  uint64 guarantee_timestamp = 10; // guarantee_timestamp
  int64  nq = 11;
}

enum DslType {
  Dsl = 0;
  BoolExprV1 = 1;
}

message SearchResults {
  Status status = 1;
  SearchResultData results = 2;
  string collection_name = 3;
}

message SearchResultData {
  int64 num_queries = 1;
  int64 top_k = 2;
  repeated FieldData fields_data = 3;
  repeated float scores = 4;
  IDs ids = 5;
  repeated int64 topks = 6;
  repeated string output_fields = 7;
}

message QueryRequest {
  string collection_name = 1;
  string expr = 2;
  repeated string output_fields = 3;
  repeated string partition_names = 4;
  uint64 travel_timestamp = 5;
  uint64 guarantee_timestamp = 6; // guarantee_timestamp
  repeated KeyValuePair query_params = 7; // optional
}

message QueryResults {
  Status status = 1;
  repeated FieldData fields_data = 2;
  string collection_name = 3;
  repeated string output_fields = 4;
}

message IDs {
  oneof id_field {
    LongArray int_id = 1;
    StringArray str_id = 2;
  }
}

message BoolArray { repeated bool data = 1; }

message IntArray { repeated int32 data = 1; }

message LongArray { repeated int64 data = 1; }

message FloatArray { repeated float data = 1; }

message DoubleArray { repeated double data = 1; }

// For special fields such as bigdecimal, array...
message BytesArray { repeated bytes data = 1; }

message StringArray { repeated string data = 1; }

message ArrayArray {
  repeated ScalarField data = 1;
  DataType element_type = 2;
}

message JSONArray { repeated bytes data = 1; }

message ValueField {
  oneof data {
    bool bool_data = 1;
    int32 int_data = 2;
    int64 long_data = 3;
    float float_data = 4;
    double double_data = 5;
    string string_data = 6;
    bytes bytes_data = 7;
  }
}

message FieldData {
  DataType type = 1;
  string field_name = 2;
  oneof field {
    ScalarField scalars = 3;
    VectorField vectors = 4;
  }
  int64 field_id = 5;
  bool is_dynamic = 6;
}

message ScalarField {
  oneof data {
    BoolArray bool_data = 1;
    IntArray int_data = 2;
    LongArray long_data = 3;
    FloatArray float_data = 4;
    DoubleArray double_data = 5;
    StringArray string_data = 6;
    BytesArray bytes_data = 7;
    ArrayArray array_data = 8;
    JSONArray json_data = 9;
  }
}

message VectorField {
  int64 dim = 1;
  oneof data {
    FloatArray float_vector = 2;
    bytes binary_vector = 3;
    bytes float16_vector = 4;
  }
}

/**
 * @brief Field schema
 */
message FieldSchema {
  int64 fieldID = 1;
  string name = 2;
  bool is_primary_key = 3;
  string description = 4;
  DataType data_type = 5;
  repeated KeyValuePair type_params = 6;
  repeated KeyValuePair index_params = 7;
  bool autoID = 8;
  FieldState state = 9; // To keep compatible with older version, the default
  // state is `Created`.
  DataType element_type = 10; // For array type, the element type is stored here
  ValueField default_value = 11; // default_value only support scalars except array and json for now
  bool is_dynamic = 12; // mark whether this field is the dynamic field
  bool is_partition_key = 13; // enable logic partitions
  ModelType model_type = 14;
}

enum FieldState {
  FieldCreated = 0;
  FieldCreating = 1;
  FieldDropping = 2;
  FieldDropped = 3;
}

/**
 * @brief Field data type
 */
enum DataType {
  None = 0;
  Bool = 1;
  Int32 = 4;
  Int64 = 5;

  Float = 10;
  Double = 11;

  String = 20;
  Array = 22;

  FloatVector = 101;
}

/**
 * @brief text to vector model type
 */
enum ModelType {
  NONE = 0;
  SIMCSE = 1;
}

message KeyValuePair {
  string key = 1;
  string value = 2;
}

message Status {
  ErrorCode error_code = 1;
  string reason = 2;
  int32 code = 3;
}

// Deprecated
enum ErrorCode {
  Success = 0;
  UnexpectedError = 1;
  ConnectFailed = 2;
  PermissionDenied = 3;
  CollectionNotExists = 4;
  IllegalArgument = 5;
  IllegalDimension = 7;
  IllegalIndexType = 8;
  IllegalCollectionName = 9;
  IllegalTOPK = 10;
  IllegalRowRecord = 11;
  IllegalVectorID = 12;
  IllegalSearchResult = 13;
  FileNotFound = 14;
  MetaFailed = 15;
  CacheFailed = 16;
  CannotCreateFolder = 17;
  CannotCreateFile = 18;
  CannotDeleteFolder = 19;
  CannotDeleteFile = 20;
  BuildIndexError = 21;
  IllegalNLIST = 22;
  IllegalMetricType = 23;
  OutOfMemory = 24;
  IndexNotExist = 25;
  EmptyCollection = 26;
  UpdateImportTaskFailure = 27;
  CollectionNameNotFound = 28;
  CreateCredentialFailure = 29;
  UpdateCredentialFailure = 30;
  DeleteCredentialFailure = 31;
  GetCredentialFailure = 32;
  ListCredUsersFailure = 33;
  GetUserFailure = 34;
  CreateRoleFailure = 35;
  DropRoleFailure = 36;
  OperateUserRoleFailure = 37;
  SelectRoleFailure = 38;
  SelectUserFailure = 39;
  SelectResourceFailure = 40;
  OperatePrivilegeFailure = 41;
  SelectGrantFailure = 42;
  RefreshPolicyInfoCacheFailure = 43;
  ListPolicyFailure = 44;
  NotShardLeader = 45;
  NoReplicaAvailable = 46;
  SegmentNotFound = 47;
  ForceDeny = 48;
  RateLimit = 49;
  NodeIDNotMatch = 50;
  UpsertAutoIDTrue = 51;
  InsufficientMemoryToLoad = 52;
  MemoryQuotaExhausted = 53;
  DiskQuotaExhausted = 54;
  TimeTickLongDelay = 55;
  NotReadyServe = 56;
  // Coord is switching from standby mode to active mode
  NotReadyCoordActivating = 57;

  // Service availability.
  // NA: Not Available.
  DataCoordNA = 100;

  // internal error code.
  DDRequestRace = 1000;
}
